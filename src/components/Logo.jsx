import { useId } from 'react';
import clsx from 'clsx';

// Logomark component remains the same
export function Logomark({ invert = false, filled = false, ...props }) {
  let id = useId();

  return (
    <svg viewBox="0 0 32 32" aria-hidden="true" {...props}>
      {/* ... (Logomark SVG content remains the same) ... */}
       <rect
        clipPath={`url(#${id}-clip)`}
        className={clsx(
          'h-8 transition-all duration-300',
          invert ? 'fill-white' : 'fill-neutral-950',
          filled ? 'w-8' : 'w-0 group-hover/logo:w-8',
        )}
      />
      <use
        href={`#${id}-path`}
        className={invert ? 'stroke-white' : 'stroke-neutral-950'}
        fill="none"
        strokeWidth="1.5"
      />
      <defs>
        <path
          id={`${id}-path`}
          d="M3.25 26v.75H7c1.305 0 2.384-.21 3.346-.627.96-.415 1.763-1.02 2.536-1.752.695-.657 1.39-1.443 2.152-2.306l.233-.263c.864-.975 1.843-2.068 3.071-3.266 1.209-1.18 2.881-1.786 4.621-1.786h5.791V5.25H25c-1.305 0-2.384.21-3.346.627-.96.415-1.763 1.02-2.536 1.751-.695.658-1.39 1.444-2.152 2.307l-.233.263c-.864.975-1.843 2.068-3.071 3.266-1.209 1.18-2.881 1.786-4.621 1.786H3.25V26Z"
        />
        <clipPath id={`${id}-clip`}>
          <use href={`#${id}-path`} />
        </clipPath>
      </defs>
    </svg>
  );
}

// Logo component with your provided "Adam" path data
export function Logo({
  className,
  invert = false,
  filled = false,
  fillOnHover = false,
  ...props
}) {
  // Use the path data you provided
  const adamPathData = "M37.1731 143H0.242997L48.2105 0.832837H93.9567L141.924 143H104.994L71.6043 36.6523H70.4936L37.1731 143ZM32.2445 87.0494H109.437V113.15H32.2445V87.0494ZM189.493 144.527C181.625 144.527 174.475 142.491 168.043 138.418C161.61 134.346 156.473 128.237 152.632 120.092C148.791 111.947 146.87 101.835 146.87 89.7567C146.87 77.2153 148.86 66.8952 152.84 58.7965C156.82 50.6978 162.026 44.7047 168.459 40.8173C174.938 36.93 181.903 34.9863 189.354 34.9863C194.953 34.9863 199.743 35.9581 203.723 37.9018C207.703 39.7992 210.989 42.252 213.581 45.2601C216.172 48.2682 218.139 51.392 219.481 54.6314H220.175V0.832837H254.12V143H220.522V125.715H219.481C218.046 129.001 216.01 132.078 213.372 134.948C210.734 137.817 207.425 140.131 203.446 141.889C199.512 143.648 194.861 144.527 189.493 144.527ZM201.294 118.079C205.412 118.079 208.93 116.922 211.845 114.608C214.761 112.248 217.005 108.939 218.579 104.682C220.152 100.424 220.939 95.4258 220.939 89.6873C220.939 83.8562 220.152 78.835 218.579 74.6237C217.051 70.4124 214.807 67.1729 211.845 64.9052C208.93 62.6376 205.412 61.5038 201.294 61.5038C197.082 61.5038 193.519 62.6607 190.603 64.9747C187.688 67.2886 185.466 70.5512 183.939 74.7625C182.458 78.9739 181.718 83.9488 181.718 89.6873C181.718 95.4258 182.481 100.424 184.009 104.682C185.536 108.939 187.734 112.248 190.603 114.608C193.519 116.922 197.082 118.079 201.294 118.079ZM305.646 144.805C298.843 144.805 292.803 143.671 287.528 141.403C282.298 139.089 278.156 135.619 275.102 130.991C272.094 126.317 270.59 120.462 270.59 113.428C270.59 107.504 271.631 102.506 273.713 98.4339C275.796 94.3614 278.665 91.0525 282.321 88.5072C285.977 85.9619 290.189 84.0414 294.955 82.7456C299.722 81.4035 304.813 80.5011 310.227 80.0383C316.29 79.4829 321.172 78.9045 324.874 78.3028C328.576 77.6549 331.261 76.7525 332.927 75.5956C334.639 74.3923 335.495 72.7031 335.495 70.5281V70.181C335.495 66.6175 334.269 63.864 331.816 61.9203C329.363 59.9766 326.054 59.0048 321.889 59.0048C317.4 59.0048 313.791 59.9766 311.06 61.9203C308.33 63.864 306.594 66.5481 305.854 69.9727L274.546 68.862C275.472 62.3831 277.855 56.5983 281.696 51.5077C285.584 46.3708 290.906 42.3445 297.663 39.429C304.465 36.4672 312.634 34.9863 322.167 34.9863C328.97 34.9863 335.241 35.7961 340.979 37.4159C346.718 38.9894 351.716 41.3033 355.973 44.3576C360.231 47.3657 363.517 51.068 365.831 55.4645C368.191 59.8609 369.371 64.8821 369.371 70.5281V143H337.439V128.145H336.606C334.708 131.754 332.279 134.809 329.317 137.308C326.401 139.807 322.954 141.681 318.974 142.931C315.04 144.18 310.597 144.805 305.646 144.805ZM316.128 122.591C319.784 122.591 323.069 121.851 325.985 120.37C328.947 118.889 331.307 116.853 333.065 114.261C334.824 111.623 335.703 108.569 335.703 105.098V94.963C334.731 95.4721 333.551 95.9349 332.163 96.3514C330.821 96.7679 329.34 97.1613 327.72 97.5315C326.101 97.9017 324.435 98.2257 322.722 98.5033C321.01 98.781 319.367 99.0355 317.794 99.2669C314.6 99.776 311.87 100.563 309.602 101.627C307.381 102.692 305.669 104.08 304.465 105.792C303.308 107.458 302.73 109.448 302.73 111.762C302.73 115.279 303.98 117.963 306.479 119.815C309.024 121.666 312.24 122.591 316.128 122.591ZM390.127 143V36.3746H422.406V55.9504H423.586C425.807 49.4714 429.556 44.3576 434.832 40.6091C440.107 36.8606 446.401 34.9863 453.713 34.9863C461.118 34.9863 467.458 36.8837 472.734 40.6785C478.009 44.4733 481.365 49.564 482.799 55.9504H483.91C485.9 49.6102 489.787 44.5428 495.572 40.7479C501.357 36.9068 508.183 34.9863 516.05 34.9863C526.139 34.9863 534.33 38.2258 540.624 44.7047C546.918 51.1374 550.065 59.9766 550.065 71.2222V143H516.12V78.997C516.12 73.675 514.754 69.6256 512.024 66.8489C509.294 64.026 505.753 62.6145 501.403 62.6145C496.729 62.6145 493.05 64.1417 490.366 67.196C487.728 70.2041 486.409 74.2535 486.409 79.3441V143H453.783V78.6499C453.783 73.6981 452.441 69.7876 449.756 66.9184C447.072 64.0491 443.532 62.6145 439.136 62.6145C436.174 62.6145 433.559 63.3318 431.291 64.7664C429.024 66.1548 427.242 68.1447 425.946 70.7363C424.697 73.3279 424.072 76.3823 424.072 79.8994V143H390.127Z";

  // Define viewBox - adjust width (3rd param) if needed based on how the text fits
  const viewBox = "0 0 200 32"; // Wider than original 130 to give text space

  // Define the transform: move right by 40, scale down by ~0.22
  // You MAY need to fine-tune the translate/scale values for perfect alignment
  const textTransform = "translate(40 0) scale(0.22)";

  return (
    <svg
      viewBox={viewBox}
      aria-hidden="true"
      className={clsx(fillOnHover && 'group/logo', className)}
      {...props}
    >
      <Logomark
         // Position the Logomark at the start
        x="0"
        y="0"
        width="32"
        height="32"
        preserveAspectRatio="xMinYMid meet"
        invert={invert}
        filled={filled}
      />
      {/* Use your Adam path, applying the transform */}
      <path
        className={invert ? 'fill-white' : 'fill-neutral-950'}
        d={adamPathData}
        transform={textTransform} // Apply scaling and translation
      />
    </svg>
  );
}